// 5x5 Matrix multiplication, 1000 Iterations

class Node {
  init(value){
    this.value = value;
    this.previous = nil;
  }
}

class List {
  init(){
    this.handle = Node(nil);
    this.size = 0;
  }

  push(value){
    var node = Node(value);
    node.previous = this.handle;
    this.handle = node;
    this.size = this.size + 1;
  }

  pop() {
    var last = this.handle;
    this.handle.previous = nil;
    this.handle = last.previous;
    this.size = this.size -1;
    return last.value;
  }

  insert(index, value){
    if (index >= this.size)
      // Out of bound;
      return nil;

    var steps = this.size - index - 1;
    var new_node = Node(value);
    var node = this.handle;
    var prev_node = nil;

    for(var idx = 0; idx < steps; idx = idx + 1){
      prev_node = node;
      node = node.previous;
    }

    // Point to the same previous node as the old node;
    new_node.previous = node.previous;
    // Now make the next node point to us.
    if (prev_node != nil)
      prev_node.previous = new_node;
    // Detach removed node
    node.previous = nil;
    return node.value;
  }

  get(index){
    if (index >= this.size)
      // Out of bound;
      return nil;

    var steps = this.size - index - 1;
    var node = this.handle;
    for(var idx = 0; idx < steps; idx = idx + 1){
      node = node.previous;
    }
    return node.value;
  }
}

fun init_matrix(m, n) {
  var my_list = List();
  for(var i = 0; i < m; i = i + 1){
    var row = List();
    for(var j = 0; j < n; j = j + 1){
      row.push(1);
    }
    my_list.push(row);
  }
  return my_list;
}

fun matrix_mul(m1, m2) {
  var result = init_matrix(m2.size, m2.get(0).size);
  for(var rm1_idx = 0; rm1_idx < m1.size; rm1_idx = rm1_idx + 1){
    var rm1 = m1.get(rm1_idx);
    var ncolumns = m2.get(0).size;
    for(var cm2_idx = 0; cm2_idx < ncolumns; cm2_idx = cm2_idx + 1){

      for (var rm2_idx = 0; rm2_idx < m2.size; rm2_idx = rm2_idx + 1){
        var m1_cell = m1.get(rm1_idx).get(rm2_idx);
        var m2_cell = m2.get(rm2_idx).get(cm2_idx);
        result.get(rm1_idx).insert(cm2_idx, m1_cell * m2_cell);
      }
    }
  }
  return result;
}

var matrix_1 = init_matrix(5, 5);
var matrix_2 = init_matrix(5, 5);
var NRUNS = 1000;
var then = clock();
for(var cnt = 0; cnt < NRUNS; cnt = cnt + 1) {
  matrix_mul(matrix_1, matrix_2);
}

var elapsed = clock() - then;
var per_run  = elapsed / NRUNS;

print "Took: " + elapsed + " ms, average iteration: " + per_run + " ms";
